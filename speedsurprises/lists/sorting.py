"""Do list sorting using InsertionSort"""

# Inspiration for function:
# https://bit.ly/2flYwOq

# Worst-case time complexity: O(n)

"""
old approach
+------+------------------------+------------------------+--------------------+
| Size |          Mean          |         Median         |       Ratio        |
+------+------------------------+------------------------+--------------------+
|  50  |  5.53393629356691e-06  | 5.524246948107603e-06  |         0          |
| 100  | 1.0662351055860479e-05 | 1.0641512908637907e-05 | 1.926720961398715  |
|  50  | 5.645417321753498e-06  | 5.6105836487851946e-06 | 1.888673670726736  |
|  25  | 2.9637512387566586e-06 | 2.929492309511339e-06  | 1.9048215814907064 |
|  12  | 1.5984559806854945e-06 | 1.5869966429882254e-06 | 1.8541337857084186 |
|  6   | 9.818755758931688e-07  | 9.748422203359475e-07  | 1.6279618517157326 |
+------+------------------------+------------------------+--------------------+
O(n) linear or O(nlogn) linearithmic

"""

"""
hypothesis
+------+----------------------+----------------------+--------------------+
| Size |         Mean         |        Median        |       Ratio        |
+------+----------------------+----------------------+--------------------+
|  50  | 0.03736873678735719  | 0.033679715499602025 |         0          |
| 100  | 0.04962828017487482  | 0.04768506262371375  | 1.3280695158971856 |
|  50  | 0.034878977954091776 | 0.034112497874957626 | 1.4228708260946261 |
|  25  | 0.016859554118855157 | 0.016754038813814986 | 2.0687959899891006 |
|  12  | 0.011186905614643668 | 0.011194709906249045 | 1.5070793210935818 |
|  6   | 0.007297811639591601 | 0.007327800125494832 | 1.5329123533352402 |
+------+----------------------+----------------------+--------------------+
O(n) linear or O(nlogn) linearithmic

"""

def insertion_sort(list):
    # print(list)
    for i in range(1, len(list)):
        currentValue = list[i]
        position = i
        while position > 0 and list[position - 1] > currentValue:
            list[position] = list[position - 1]
            position -= 1
        list[position] = currentValue



"""
+------+----------------------+----------------------+--------------------+
| Size |         Mean         |        Median        |       Ratio        |
+------+----------------------+----------------------+--------------------+
|  50  |  0.0371916009750142  |  0.0360483790627768  |         0          |
| 100  | 0.051045808425078575 | 0.049934540624235524 | 1.3725090366336155 |
|  50  | 0.032720282783369234 | 0.03100818556322338  | 1.560066236683739  |
|  25  | 0.016974883793894453 | 0.01663267550065939  | 1.9275703551583725 |
|  12  | 0.010310080338634483 | 0.010280685813086166 | 1.6464356470904755 |
|  6   | 0.006892273830218679 | 0.006876752796870278 | 1.495889541334048  |
+------+----------------------+----------------------+--------------------+
O(1) constant or O(logn) logarithmic

+------+-----------------------+-----------------------+--------------------+
| Size |          Mean         |         Median        |       Ratio        |
+------+-----------------------+-----------------------+--------------------+
|  1   | 0.0041991017583313806 |  0.004187005375115405 |         0          |
|  2   |  0.003674964939076138 | 0.0035180619220227527 |  0.87517882408653  |
|  4   |  0.003859461508363893 | 0.0037604140156872745 | 1.0502036270675648 |
|  8   |  0.004358029605797734 |  0.004277046219158365 | 1.1291807409798977 |
|  16  |  0.005833040972872064 |  0.005727743531224405 | 1.3384583172890883 |
|  32  |  0.008720324905213298 |  0.008487748593324795 | 1.4949877680903032 |
|  64  |  0.016241567304192964 |  0.015666610313928686 | 1.8624956616562782 |
| 128  |  0.026322497996200886 |  0.026237677750032162 | 1.6206870619811058 |
| 256  |   0.0495093277291744  |  0.04723542074862053  | 1.880874973808339  |
| 512  |  0.09173116064872981  |  0.08971752050274517  | 1.8528056197918301 |
+------+-----------------------+-----------------------+--------------------+
"""
def generate_list(list):
    pass


"""Do list sorting using BubbleSort"""

# Source and/or inspiration for the function(s):
# https://bit.ly/2pXGWai

# Worst-case time complexity: O(n^2)

"""
+------+----------------------+----------------------+--------------------+
| Size |         Mean         |        Median        |       Ratio        |
+------+----------------------+----------------------+--------------------+
|  50  | 0.03479846323334641  | 0.033889414624354686 |         0          |
| 100  | 0.05063357222885922  |  0.0479247042494535  | 1.4550519627642193 |
|  50  | 0.03181358610381722  | 0.02969828162531485  | 1.5915707227606084 |
|  25  | 0.01580037304987248  | 0.015360325436631683 | 2.0134705682834477 |
|  12  | 0.010115306052042191 | 0.010030271625510068 | 1.5620261975842564 |
|  6   |  0.0068235765739549  | 0.006851446203199885 | 1.4824052961685203 |
+------+----------------------+----------------------+--------------------+
O(1) constant or O(logn) logarithmic
"""

def bubble_sort(list):
    """Sorts a list using BubbleSort function."""
    for num in range(len(list) - 1, 0, -1):
        for i in range(num):
            if list[i] > list[i + 1]:
                temp = list[i]
                list[i] = list[i + 1]
                list[i + 1] = temp


"""Do list sorting using MergeSort"""

# Source and/or inspiration for the function(s):
# https://bit.ly/2TOMWP3

# Worst-case time complexity: O(nlogn)


def merge_sort(list):
    """Sorts a list using MergeSort function."""
    if len(list) > 1:
        mid = len(list) // 2
        lefthalf = list[:mid]
        righthalf = list[mid:]

        merge_sort(lefthalf)
        merge_sort(righthalf)

        i = 0
        j = 0
        k = 0
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                list[k] = lefthalf[i]
                i = i + 1
            else:
                list[k] = righthalf[j]
                j = j + 1
            k = k + 1

        while i < len(lefthalf):
            list[k] = lefthalf[i]
            i = i + 1
            k = k + 1

        while j < len(righthalf):
            list[k] = righthalf[j]
            j = j + 1
            k = k + 1
