"""Compute basic search functions"""
# https://www.geeksforgeeks.org/python-program-for-linear-search/
# https://www.geeksforgeeks.org/python-program-for-binary-search/
# import random


# Worst-case time complexity: O(n)

###with backfill
# +------+------------------------+------------------------+--------------------+
# | Size |          Mean          |         Median         |       Ratio        |
# +------+------------------------+------------------------+--------------------+
# |  1   | 6.603127421049108e-07  | 6.598585929745715e-07  |         0          |
# |  2   | 1.6085519556665224e-06 | 1.6000149536121722e-06 | 2.436045608538257  |
# |  4   | 2.936303180175089e-06  | 2.8548926925830997e-06 | 1.8254326009372805 |
# |  2   | 1.6929677978468524e-06 | 1.5718431549127665e-06 | 1.7344117140972992 |
# |  1   | 6.652348131204928e-07  |  6.64530199048774e-07  | 2.5449176207502657 |
# |  0   | 5.525940795262733e-07  | 5.444192390374747e-07  | 1.2038399211420867 |
# +------+------------------------+------------------------+--------------------+
# O(1) constant or O(logn) logarithmic



"""MacOS 3.1GHz before the change
+------+----------------------+----------------------+--------------------+
| Size |         Mean         |        Median        |       Ratio        |
+------+----------------------+----------------------+--------------------+
| 100  | 0.011249413768746308 | 0.010628412562482481 |         0          |
| 200  | 0.020296139064566888 | 0.02004470649990253  | 1.8041952657972855 |
| 100  | 0.010567061488571502 | 0.01051351821888602  | 1.9206984918671655 |
|  50  | 0.005764128567185859 | 0.005748204890664965 | 1.8332452799071608 |
|  25  | 0.003430848690095445 | 0.003389037718761756 | 1.6800882486675632 |
|  50  | 0.006139447667203512 | 0.006021079453262246 | 1.7894836589347562 |
+------+----------------------+----------------------+--------------------+
O(n) linear or O(nlogn) linearithmic
"""

"""Linux
+------+------------------------+------------------------+--------------------+
| Size |          Mean          |         Median         |       Ratio        |
+------+------------------------+------------------------+--------------------+
| 100  | 3.3174238680041176e-05 | 3.226102697784228e-05  |         0          |
| 200  |  6.68477903809972e-05  | 6.815335302867709e-05  | 2.0150512277231325 |
| 400  | 0.00015845340114045332 | 0.00014317295019594667 | 2.370361088038249  |
| 800  | 0.00031762682656288156 | 0.0003103897206955253  | 2.0045440759036577 |
| 400  | 0.00016482944514824757 | 0.00015667049511591813 | 1.9270029470596595 |
| 200  | 7.102224829088991e-05  | 6.730445190505918e-05  | 2.3208142394077154 |
+------+------------------------+------------------------+--------------------+
O(n) linear or O(nlogn) linearithmic

"""

"""
out of time: 529.6385278701782
+------+------------------------+------------------------+--------------------+
| Size |          Mean          |         Median         |       Ratio        |
+------+------------------------+------------------------+--------------------+
| 800  | 0.00032411441796753593 | 0.00031203501269772005 |         0          |
| 1600 | 0.0005577689142578871  | 0.0005568779238274146  | 1.7209012723209203 |
+------+------------------------+------------------------+--------------------+
O(n) linear or O(nlogn) linearithmic
"""

def compute_linear_search(list):
    """Search a list using linear search function."""
    # x = random.choice(list)
    x = list[len(list) - 1]
    for i in range(len(list)):
        if list[i] == x:
            break


# Worst-case time complexity: O(logn)

def compute_binary_search(list):
    """Search a list using linear search function."""
    first = 0
    last = len(list) - 1
    # Search target set as the last number in the list for the worst case
    target = list[last]
    found = False
    while(first <= last and not found):
        mid = int((first + last) / 2)
        if list[mid] == target :
            found = True
            break
        else:
            if target < list[mid]:
                last = mid - 1
            else:
                first = mid + 1
